package main

import (
	"fmt"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/sirupsen/logrus"
	"gitlab.com/janneseffendi/rest-api/internal/controller"

	httpSwagger "github.com/swaggo/http-swagger/v2"
	_ "gitlab.com/janneseffendi/rest-api/docs" // docs is generated by Swag CLI, you have to import it.
)

// https://go-chi.io/#/pages/middleware
//	@title			Rest Api Example
//	@version		1.0
//	@description	Simple Rest Api server with full features
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

// @host		localhost:8080
// @BasePath	/api/v1
// @securityDefinitions.basic BasicAuth
// @securityDefinitions.apikey TokenAuth
// @in header
// @name Authorization

// @externalDocs.description OpenAPI
// @externalDocs.url https://swagger.io/resources/open-api/
func main() {
	r := chi.NewRouter()
	r.Use(
		middleware.Logger,
		middleware.Recoverer,
	)

	r.Route("/api/v1", func(r chi.Router) {
		controller.AddPublicRouter(r)
		controller.AddAuthRouter(r)
	})

	// Add Swagger
	uri, err := url.Parse("http://localhost:8080/api/v1")
	if err != nil {
		panic(err)
	}
	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
		httpSwagger.BeforeScript(`const UrlMutatorPlugin = (system) => ({
			rootInjects: {
			  setScheme: (scheme) => {
				const jsonSpec = system.getState().toJSON().spec.json;
				const schemes = Array.isArray(scheme) ? scheme : [scheme];
				const newJsonSpec = Object.assign({}, jsonSpec, { schemes });

				return system.specActions.updateJsonSpec(newJsonSpec);
			  },
			  setHost: (host) => {
				const jsonSpec = system.getState().toJSON().spec.json;
				const newJsonSpec = Object.assign({}, jsonSpec, { host });

				return system.specActions.updateJsonSpec(newJsonSpec);
			  },
			  setBasePath: (basePath) => {
				const jsonSpec = system.getState().toJSON().spec.json;
				const newJsonSpec = Object.assign({}, jsonSpec, { basePath });

				return system.specActions.updateJsonSpec(newJsonSpec);
			  }
			}
		  });`),
		httpSwagger.Plugins([]string{"UrlMutatorPlugin"}),
		httpSwagger.UIConfig(map[string]string{
			"onComplete": fmt.Sprintf(`() => {
			  window.ui.setScheme('%s');
			  window.ui.setHost('%s');
			  window.ui.setBasePath('%s');
			}`, uri.Scheme, uri.Host, uri.Path),
		}),
	))

	logrus.Info("starting server on localhost:8080")
	if err := http.ListenAndServe(":8080", r); err != nil {
		logrus.Errorf("error starting server :%s", err.Error())
	}
}

func OpenApi3Server(r chi.Router) {
	path := "/swagger-ui"
	workDir, _ := os.Getwd()
	filesDir := http.Dir(filepath.Join(workDir, "static", "swagger-ui"))

	if strings.ContainsAny(path, "{}*") {
		panic("FileServer does not permit any URL parameters.")
	}

	if path != "/" && path[len(path)-1] != '/' {
		r.Get(path, http.RedirectHandler(path+"/", 301).ServeHTTP)
		path += "/"
	}
	path += "*"

	r.Get(path, func(w http.ResponseWriter, r *http.Request) {
		rctx := chi.RouteContext(r.Context())
		pathPrefix := strings.TrimSuffix(rctx.RoutePattern(), "/*")
		fs := http.StripPrefix(pathPrefix, http.FileServer(filesDir))
		fs.ServeHTTP(w, r)
	})
}
